/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface MetaMultiSigWalletInterface extends utils.Interface {
  contractName: "MetaMultiSigWallet";
  functions: {
    "addSigner(address,uint256)": FunctionFragment;
    "chainId()": FunctionFragment;
    "executeTransaction(address,uint256,bytes,bytes[])": FunctionFragment;
    "getTransactionHash(uint256,address,uint256,bytes)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "owners(uint256)": FunctionFragment;
    "recover(bytes32,bytes)": FunctionFragment;
    "removeSigner(address,uint256)": FunctionFragment;
    "signaturesRequired()": FunctionFragment;
    "updateSignaturesRequired(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addSigner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeTransaction",
    values: [string, BigNumberish, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [BigNumberish, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owners",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recover",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSigner",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signaturesRequired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateSignaturesRequired",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owners", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recover", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signaturesRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSignaturesRequired",
    data: BytesLike
  ): Result;

  events: {
    "Deposit(address,uint256,uint256)": EventFragment;
    "ExecuteTransaction(address,address,uint256,bytes,uint256,bytes32,bytes)": EventFragment;
    "Owner(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecuteTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Owner"): EventFragment;
}

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { sender: string; amount: BigNumber; balance: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type ExecuteTransactionEvent = TypedEvent<
  [string, string, BigNumber, string, BigNumber, string, string],
  {
    owner: string;
    to: string;
    value: BigNumber;
    data: string;
    nonce: BigNumber;
    hash: string;
    result: string;
  }
>;

export type ExecuteTransactionEventFilter =
  TypedEventFilter<ExecuteTransactionEvent>;

export type OwnerEvent = TypedEvent<
  [string, boolean],
  { owner: string; added: boolean }
>;

export type OwnerEventFilter = TypedEventFilter<OwnerEvent>;

export interface MetaMultiSigWallet extends BaseContract {
  contractName: "MetaMultiSigWallet";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MetaMultiSigWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addSigner(
      newSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getTransactionHash(
      _nonce: BigNumberish,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    recover(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeSigner(
      oldSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signaturesRequired(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateSignaturesRequired(
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addSigner(
    newSigner: string,
    newSignaturesRequired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  executeTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    signatures: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getTransactionHash(
    _nonce: BigNumberish,
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  recover(
    _hash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  removeSigner(
    oldSigner: string,
    newSignaturesRequired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signaturesRequired(overrides?: CallOverrides): Promise<BigNumber>;

  updateSignaturesRequired(
    newSignaturesRequired: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addSigner(
      newSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: CallOverrides
    ): Promise<string>;

    getTransactionHash(
      _nonce: BigNumberish,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    recover(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeSigner(
      oldSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signaturesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    updateSignaturesRequired(
      newSignaturesRequired: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposit(address,uint256,uint256)"(
      sender?: string | null,
      amount?: null,
      balance?: null
    ): DepositEventFilter;
    Deposit(
      sender?: string | null,
      amount?: null,
      balance?: null
    ): DepositEventFilter;

    "ExecuteTransaction(address,address,uint256,bytes,uint256,bytes32,bytes)"(
      owner?: string | null,
      to?: null,
      value?: null,
      data?: null,
      nonce?: null,
      hash?: null,
      result?: null
    ): ExecuteTransactionEventFilter;
    ExecuteTransaction(
      owner?: string | null,
      to?: null,
      value?: null,
      data?: null,
      nonce?: null,
      hash?: null,
      result?: null
    ): ExecuteTransactionEventFilter;

    "Owner(address,bool)"(
      owner?: string | null,
      added?: null
    ): OwnerEventFilter;
    Owner(owner?: string | null, added?: null): OwnerEventFilter;
  };

  estimateGas: {
    addSigner(
      newSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    executeTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getTransactionHash(
      _nonce: BigNumberish,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    owners(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    recover(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeSigner(
      oldSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signaturesRequired(overrides?: CallOverrides): Promise<BigNumber>;

    updateSignaturesRequired(
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addSigner(
      newSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      signatures: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      _nonce: BigNumberish,
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owners(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recover(
      _hash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeSigner(
      oldSigner: string,
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signaturesRequired(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateSignaturesRequired(
      newSignaturesRequired: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
